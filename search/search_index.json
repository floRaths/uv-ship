{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"intro","text":""},{"location":"#uv-ship","title":"uv-ship","text":"a CLI-tool for shipping with uv <p><code>uv-ship</code> is a lightweight companion to uv that removes the risky parts of cutting a release. It verifies the repo state, bumps your project metadata and optionally refreshes the changelog. It then commits, tags &amp; pushes the result, while giving you the chance to review every step.</p>"},{"location":"#key-capabilities","title":"Key Capabilities","text":"<ul> <li>version automation: drive <code>uv version</code> to bump or set the next release number, keeping <code>pyproject.toml</code> and <code>uv.lock</code> in sync.</li> <li>preflight checks: guard your release workflow by verifying branch, tags, and a clean working tree before shipping.</li> <li>changelog generation: auto-builds changelog sections from commits since the latest tag.</li> <li>one-shot release: stage, commit, tag, and push in a single step.</li> <li>dry-run mode: preview every action before making changes.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li> <p>Install as a standalone CLI tool (recommended): <pre><code>$ uv tool install uv-ship\n</code></pre></p> </li> <li> <p>Set up basic configurations by placing a <code>[tool.uv-ship]</code> table in your <code>pyproject.toml</code>.</p> </li> <li> <p>Run <code>uv-ship --dry-run next minor</code></p> </li> <li> <p>Review the changelog preview, confirm the prompts, and watch the tag and push finish.</p> </li> </ol> <p>Prefer to set an explicit version? Use <code>uv-ship version 1.2.0</code> instead of bumping.</p> <p>Need to inspect the changelog first? Run <code>uv-ship log --latest</code> to preview commits since the last tag or <code>uv-ship log --save</code> to refresh the configured changelog file.</p>"},{"location":"#cli-overview","title":"CLI overview","text":"<ul> <li><code>uv-ship next &lt;bump-type&gt;</code> \u2013 bump <code>pyproject.toml</code> &amp; <code>uv.lock</code>, update the changelog (optional), commit, tag, push.</li> <li><code>uv-ship version &lt;version&gt;</code> \u2013 set a specific version without calculating the bump.</li> <li><code>uv-ship log [--latest] [--save]</code> \u2013 show/update the changelog section built from commits after the latest tag.</li> </ul> <p>Pass <code>--dry-run</code> on the root command to rehearse any of the subcommands without touching disk:</p> <pre><code>uv-ship --dry-run next minor\n</code></pre>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Not inside a Git repository \u2013 Run the CLI from within your project checkout.</li> <li>Not on release branch \u2013 Update your [tool.uv-ship] config or check out the correct branch before retrying.</li> <li>Tag already exists \u2013 uv-ship will not overwrite tags. Delete or rename the existing tag locally and remotely, then rerun.</li> <li>Dirty working tree \u2013 Inspect changes with git status --short. Either clean up, or if intentional, pass --dirty (per run) or set allow-dirty = true.</li> <li>uv not found / fails \u2013 Ensure the uv executable is installed, available in your PATH, and that your project has a valid pyproject.toml.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT license.</p> <p>happy shipping!</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v070-2025-10-21","title":"<code>v0.7.0</code> \u2014 [2025-10-21]","text":"<ul> <li>pkg: added pytest [444b564]</li> <li>fix: credentials exposure in Git remotes [2e69ee9]</li> <li>feat: support for \"[Unreleased]\" sections in the changelog [9c321e2]</li> <li>pkg: py &gt; 3.10 systems won't install tomli as dep [7027535]</li> </ul>"},{"location":"changelog/#v061-2025-10-20","title":"<code>v0.6.1</code> \u2014 [2025-10-20]","text":"<p>co-authored by: wvanhed</p> <ul> <li>fix: resolve UnicodeDecodeError on Windows [7c4700e]</li> </ul>"},{"location":"changelog/#v060-2025-10-08","title":"<code>v0.6.0</code> \u2014 [2025-10-08]","text":"<p>co-authored by: gokhanmeteerturk</p> <ul> <li>feat: add changelog item template with optional commit references [fc15970]</li> <li>fix: allow more option for changelog template. [3c9a931]</li> <li>pkg: added repo_url to uv-ship status [55de06d]</li> <li>docs: added changelog template to docs/config [373e806]</li> </ul>"},{"location":"changelog/#v055-2025-10-05","title":"<code>v0.5.5</code> \u2014 [2025-10-05]","text":"<ul> <li>fix: changelogger issue with print_sections</li> <li>docs: updated installation</li> <li>pkg: pin python version</li> <li>pkg: update gitignore</li> </ul>"},{"location":"changelog/#v054-2025-10-03","title":"<code>v0.5.4</code> \u2014 [2025-10-03]","text":"<ul> <li>ux: improved workflow messages</li> </ul>"},{"location":"changelog/#v053-2025-10-03","title":"<code>v0.5.3</code> \u2014 [2025-10-03]","text":"<ul> <li>fix: not reporting non-required gh tool in status</li> </ul>"},{"location":"changelog/#v052-2025-10-02","title":"<code>v0.5.2</code> \u2014 [2025-10-02]","text":"<ul> <li>fix: issue#4 - missing changelog can not be committed</li> </ul>"},{"location":"changelog/#v051-2025-10-01","title":"<code>v0.5.1</code> \u2014 [2025-10-01]","text":"<ul> <li>fix: trailing-whitespace hook breaking my docs list</li> </ul>"},{"location":"changelog/#v050-2025-10-01","title":"<code>v0.5.0</code> \u2014 [2025-10-01]","text":"<ul> <li>feat: commit-message template</li> <li>docs: revamped config and reference sections</li> </ul>"},{"location":"changelog/#v042-2025-10-01","title":"<code>v0.4.2</code> \u2014 [2025-10-01]","text":"<ul> <li>fix: version check crashes when tool not available</li> </ul>"},{"location":"changelog/#v041-2025-10-01","title":"<code>v0.4.1</code> \u2014 [2025-10-01]","text":"<ul> <li>fix: git version report</li> </ul>"},{"location":"changelog/#v040-2025-09-30","title":"<code>v0.4.0</code> \u2014 [2025-09-30]","text":"<ul> <li>better feedback on wrong release type/version input</li> <li>new status command shows project info</li> </ul>"},{"location":"changelog/#v032-2025-09-30","title":"<code>v0.3.2</code> \u2014 [2025-09-30]","text":"<ul> <li>new changelogger routine added with user prompt</li> <li>changelogger now evaluates update strategy</li> <li>replaced click with rich-click</li> </ul>"},{"location":"changelog/#v031-2025-09-29","title":"<code>v0.3.1</code> \u2014 [2025-09-29]","text":"<ul> <li>changed toc_depth for changelog docs</li> <li>adding backticks to changelog sections</li> <li>added custom toc-depth option</li> <li>Update README.md</li> <li>changed 'what's new' to 'release notes'</li> </ul>"},{"location":"changelog/#v030-2025-09-28","title":"<code>v0.3.0</code> \u2014 [2025-09-28]","text":"<ul> <li>renamed cli command 'bump' to 'next'</li> <li>introduced cli 'version' command</li> <li>added click as cli driver</li> <li>implemented changelog generation</li> <li>implemented proper \"dry-running\"</li> <li>fleshed out docs</li> <li>fixed default flag handling in cli</li> <li>package housekeeping:<ul> <li>updates dependencies and relaxed requirements</li> <li>added license</li> <li>started addings tests</li> <li>gitignore, resources, ansi-codes, etc</li> </ul> </li> </ul>"},{"location":"changelog/#v020-2025-09-23","title":"<code>v0.2.0</code> \u2014 [2025-09-23]","text":"<ul> <li>[main] set to be the new base branch</li> <li>official initialization of the project</li> </ul>"},{"location":"changelog/#pre-v02-2025-09-2223","title":"<code>pre v0.2</code> \u2014 [2025-09-22/23]","text":"<ul> <li>initial construction phase (squashed)</li> <li>releases have been yanked on PyPI</li> </ul>"},{"location":"config/","title":"config","text":""},{"location":"config/#configuration","title":"Configuration","text":"<p>uv-ship reads user defined settings from a <code>[tool.uv-ship]</code> table in a toml file. By default, it will look for such a table in either <code>uv-ship.toml</code> or <code>pyproject.toml</code> in your project root. Optionally, you can use the <code>--config</code> flag to point to a custom file.</p> the config source is reported every time you invoke <code>uv-ship</code> <pre><code>$ uv-ship\n\nuv-ship - a CLI-tool for shipping with uv\nconfig source: \"pyproject.toml\"\n</code></pre> <p> If no config is provided, uv-ship will fall back to its default settings.</p>"},{"location":"config/#example-configuration","title":"Example Configuration","text":"<pre><code># pyproject.toml\n[tool.uv-ship]\nrelease-branch = \"main\"\ntag-prefix = \"v\"\nallow-dirty = false\nchangelog-path = \"CHANGELOG\"\nchangelog-template = \"- {message} [{hash}]\"\n</code></pre> <p>Note</p> <p>If both <code>uv-ship.toml</code> and <code>pyproject.toml</code> contain a <code>[tool.uv-ship]</code> table, the CLI aborts to avoid ambiguous settings.</p> <p></p>"},{"location":"config/#available-settings","title":"Available Settings","text":""},{"location":"config/#release-branch","title":"<code>release-branch</code>","text":"<p>string | bool  : <code>\"main\"</code></p> <p>Defines the branch that must be checked out before shipping. Set to <code>false</code> to disable this check.</p>"},{"location":"config/#tag-prefix","title":"<code>tag-prefix</code>","text":"<p>string  : <code>\"v\"</code></p> <p>Prefix added to the Git tag (e.g. <code>1.6.2</code> becomes <code>v1.6.2</code>).</p>"},{"location":"config/#allow-dirty","title":"<code>allow-dirty</code>","text":"<p>bool  : <code>false</code></p> <p>Allow preflight checks to pass despite uncommitted changes. You can override per-run with <code>--dirty</code></p>"},{"location":"config/#changelog-path","title":"<code>changelog-path</code>","text":"<p>string  : <code>\"CHANGELOG\"</code></p> <p>Relative path to the changelog file that the changelog feature reads and refreshes.</p>"},{"location":"config/#changelog-template","title":"<code>changelog-template</code>","text":"<p>string  : <code>\"- {message} [{commit_ref}]\"</code></p> <p>Template used when rendering commit entries in the changelog preview. The tokens below are supported placeholders:</p> <ul> <li><code>{message}</code> \u2013 the commit subject line.</li> <li><code>{commit_ref}</code> \u2013 a Markdown link to the commit</li> <li><code>{commit_hash}</code>/<code>{hash}</code> \u2013 the short commit hash.</li> <li><code>{repo_url}</code> \u2013 the base commit URL </li> </ul> <p>If uv-ship cannot resolve the repo_url it will fall back to commit hash instead. (applies to <code>commit_ref</code> and <code>repo_url</code> tokens)</p> <p>The default produces following format:</p> <ul> <li>feat: add changelog template [c505b40]</li> </ul>"},{"location":"config/#unreleased-tag","title":"<code>unreleased-tag</code>","text":"<p>string  : <code>\"[unreleased]\"</code></p> <p>The default tag used by <code>uv-ship log</code> for all commits since the latest tag.</p>"},{"location":"config/#repo-url","title":"<code>repo-url</code>","text":"<p>string  : <code>\"\"</code></p> <p>Option for overriding the repository URL in case it is a private (eg: self-hosted organization repositories)</p>"},{"location":"config/#commit-message","title":"<code>commit-message</code>","text":"<p>string  : <code>\"new version {old_ver} \u2192 {new_ver}\"</code></p> <p>Template for the commit message that is generated. It accepts two optional tokens, <code>{old_ver}</code> and <code>{new_ver}</code>, which will represent the package version before and after uv-ship completes, respectively.</p> <p>For example, this is a message generated by the default setting:  </p> <p>new version 1.6.2 \u2192 1.7.0</p>"},{"location":"config/#dry-run","title":"<code>dry-run</code>","text":"<p>bool  : <code>false</code></p> <p>Force all commands into dry-run mode. May be convenient when testing the tool, but can't be overridden in in the CLI and thus needs to be set to <code>false</code> for operation.</p>"},{"location":"features/","title":"reference","text":""},{"location":"features/#cli-reference","title":"CLI reference","text":""},{"location":"features/#uv-ship","title":"<code>uv-ship</code>","text":"<p>The main entrypoint to access uv-ship features</p> <p>usage: <code>uv-ship [options] command [args]</code></p>"},{"location":"features/#options","title":"options:","text":"<p><code>--config</code> Path to config file (inferred if not provided). <code>--dry-run</code> Show what would be done without making any changes. <code>--self</code> Display uv-ship version. <code>--help</code> Show a help message and exit.  </p>"},{"location":"features/#commands","title":"commands","text":""},{"location":"features/#uv-ship-next","title":"<code>uv-ship next</code>","text":"<p>Calculates the next semantic version (<code>major</code>, <code>minor</code>, or <code>patch</code>), runs the preflight checks, offers to refresh the changelog, updates version metadata, and executes the commit/tag/push sequence unless running as a dry run.</p> <p>usage: <code>uv-ship next [options] RELEASE_TYPE</code></p> <p>possible values: <code>major</code>, <code>minor</code>, <code>patch</code>, <code>stable</code></p> <p>can be paired with pre-release components: <code>alpha</code>, <code>beta</code>, <code>rc</code>, <code>post</code>, <code>dev</code></p> <p>to remove pre-release status, pass <code>stable</code> as release version</p>"},{"location":"features/#options_1","title":"options:","text":"<p><code>--pre-release</code> Pre-release component (e.g. alpha, beta). <code>--dirty</code> Allow dirty working directory. <code>--help</code> Show this message and exit.  </p>"},{"location":"features/#uv-ship-version","title":"<code>uv-ship version</code>","text":"<p>Prepares and ships the provided version. This path allows you to break out of semantic versioning conventions if desired.</p> <p>usage: <code>uv-ship version [options] {VERSION}</code></p>"},{"location":"features/#options_2","title":"options:","text":"<p><code>--dirty</code> Allow dirty working directory. <code>--help</code> Show this message and exit.  </p>"},{"location":"features/#uv-ship-log","title":"<code>uv-ship log</code>","text":"<p>Builds a changelog section from commits since the latest Git tag. Use <code>--latest</code> to preview without writing, or <code>--save</code> to persist the top section of your configured changelog file.</p> <p>usage: <code>uv-ship log [options]</code></p>"},{"location":"features/#options_3","title":"options:","text":"<p><code>--latest</code> Show all commits since the last tag. <code>--save</code> Save changes to the changelog. <code>--help</code> Show this message and exit.  </p>"},{"location":"features/#uv-ship-status","title":"<code>uv-ship status</code>","text":"<p>Display a status report for the current package.</p> <p>usage: <code>uv-ship status</code></p>"},{"location":"features/#options_4","title":"options:","text":"<p><code>--help</code> Show this message and exit.  </p>"},{"location":"features/#working-with-changelogs","title":"working with changelogs","text":"<ul> <li>The reader targets the configured <code>changelog-path</code> (default: <code>CHANGELOG</code>); ensure the file exists.</li> <li>Generated sections take the form <code>## vX.Y.Z \u2014 [YYYY-MM-DD]</code>, with bullet formatting normalised for Markdown.</li> <li>When refreshing, the tool compares the newest Git tag against the latest changelog heading:</li> <li>If they match, the section is replaced.</li> <li>Otherwise, the new section is inserted at the top of the file.</li> <li><code>uv-ship log --latest</code> always prints to the terminal, whereas <code>--save</code> writes the content unless <code>--dry-run</code> is active.</li> </ul>"},{"location":"installation/","title":"install","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<p>uv-ship is a CLI tool that aims to add repository interfacing functionality to uv. The minimum requirements are therefore:</p> <ul> <li>uv 0.7.0 or later on your <code>PATH</code></li> <li>a python project that is managed with uv</li> <li>a Git repository</li> </ul>"},{"location":"installation/#standalone-cli-installation","title":"Standalone CLI installation","text":"<p>It is recommended to install uv-ship as a standalone uv tool, where it can run in a dedicated environment:</p> <pre><code>$ uv tool install uv-ship\n</code></pre> <p>You can update to the latest version via: <pre><code>$ uv tool update uv-ship\n</code></pre></p>"},{"location":"installation/#usage-as-a-project-dependency","title":"Usage as a project dependency","text":"<p>Alternatively you can add uv-ship as a dependency to your project as long at it runs python 3.10+. </p> <pre><code>$ uv add uv-ship\n</code></pre>"},{"location":"workflow/","title":"workflow","text":""},{"location":"workflow/#release-workflow","title":"Release Workflow","text":"<p><code>uv-ship</code> wraps the essentials of a release into five predictable stages. The flow is the same whether you bump with <code>uv-ship next</code> or set an explicit version with <code>uv-ship version</code>.</p> <p>At a glance: <pre><code>uv-ship next patch\n\u2514\u2500 preview \u2192 preflight \u2192 changelog \u2192 update files \u2192 commit/tag/push\n</code></pre></p>"},{"location":"workflow/#1-preview-the-version-change","title":"1. Preview the version change","text":"<ul> <li>Prints a colour-coded summary so you can sanity-check the bump before anything changes on disk.</li> </ul>"},{"location":"workflow/#2-run-preflight-checks","title":"2. Run preflight checks","text":"<ul> <li>branch guard \u2013 compares the active branch with <code>release-branch</code> and aborts if they differ (unless you set it to <code>false</code>).</li> <li>tag safety \u2013 checks both local and remote tags for conflicts with the tag that will be generated (<code>{tag-prefix}{version}</code>).</li> <li>working tree status \u2013 inspects Git status and blocks/warns when uncommited changes are present. Override per run with <code>--dirty</code> or permanently with <code>allow-dirty = true</code> in the config.</li> </ul>"},{"location":"workflow/#3-edit-changelog-optional","title":"3. Edit changelog (optional)","text":"<ul> <li>offers to auto-build the next changelog section from commits messages since the previous tag.</li> </ul> <p>Note</p> <p>you will have the chance to tidy up the section before the workflow proceeds with committing the file.</p>"},{"location":"workflow/#4-apply-version-changes","title":"4. Apply version changes","text":"<ul> <li>under the hood, <code>uv-ship</code> simply calls <code>uv version</code> which updates <code>pyproject.toml</code> and <code>uv.lock</code> to the new version string.</li> </ul>"},{"location":"workflow/#5-ship-it","title":"5. Ship it","text":"<ul> <li>stages the updated files (<code>pyproject.toml</code>, <code>uv.lock</code>, and <code>CHANGELOG</code>).</li> <li>commits with the message <code>new version: {old} \u2192 {new}</code>.</li> <li>creates the Git tag and pushes both the commit and the tag to <code>origin</code>.</li> </ul>"},{"location":"workflow/#interactive-safeguards","title":"Interactive safeguards","text":"<ul> <li>Use <code>--dry-run</code> at the root command to simulate the entire workflow without writing.</li> <li>Every destructive step (changelog save, file updates, push) is hidden behind an interactive confirmation. Reply with anything other than <code>y</code> or <code>yes</code> to abort safely.</li> </ul>"}]}